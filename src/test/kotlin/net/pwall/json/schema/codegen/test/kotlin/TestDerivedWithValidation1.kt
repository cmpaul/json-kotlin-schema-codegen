/*
 * TestDerivedWithValidation1.kt
 *
 * This code was generated by json-kotlin-schema-codegen - JSON Schema Code Generator
 * See https://github.com/pwall567/json-kotlin-schema-codegen
 *
 * It is not advisable to modify generated code as any modifications will be lost
 * when the generation process is re-run.
 */
package net.pwall.json.schema.codegen.test.kotlin

/**
 * Add const and default to enum and minimum range on int and maximum length on string
 */
class TestDerivedWithValidation1(
    type: Type = Type.FIRST,
    quantity: Int,
    name: String,
    val payload: String
) : TestBaseWithValidation(type, quantity, name) {

    init {
        require(type == Type.FIRST) { "type not constant value FIRST - $type" }
        require(quantity >= 0) { "quantity < minimum 0 - $quantity" }
        require(name.length <= 30) { "name length > maximum 30 - ${name.length}" }
    }

    override fun equals(other: Any?): Boolean = this === other || other is TestDerivedWithValidation1 &&
            super.equals(other) &&
            payload == other.payload

    override fun hashCode(): Int = super.hashCode() xor
            payload.hashCode()

    override fun toString() = "TestDerivedWithValidation1(type=$type, quantity=$quantity, name=$name, payload=$payload)"

    fun copy(
        type: Type = this.type,
        quantity: Int = this.quantity,
        name: String = this.name,
        payload: String = this.payload
    ) = TestDerivedWithValidation1(type, quantity, name, payload)

    operator fun component4() = payload

}
